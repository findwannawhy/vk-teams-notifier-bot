import logging
import pytz
from bot.bot import Bot
from bot.handler import MessageHandler, CommandHandler
from bot.types import InlineKeyboardMarkup, KeyboardButton
from bot.filter import RegexpFilter
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import time
import schedule
from threading import Thread
import re
import os

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
TOKEN = "001.2619402640.1072935266:1011994482"
botname = "vkpracticesannbot"

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–∏–∑ utils/patterns.py)
greet_pattern = re.compile(r'^(qq|–∫—É|–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–∑–¥–∞—Ä–æ–≤–∞)\s*[!.]*$', re.IGNORECASE)
farewell_pattern = re.compile(r'^(–±–±|–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è)\s*[!.]*$', re.IGNORECASE)

user_states = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
moscow_tz = pytz.timezone('Europe/Moscow')
scheduler = BackgroundScheduler(timezone=moscow_tz)
scheduler.start()


# --- –§—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---

def load_scheduled_tasks(bot):
    try:
        if not os.path.exists("tasks.txt"):
            with open("tasks.txt", "w", encoding="utf-8"):
                pass

        with open("tasks.txt", "r", encoding="utf-8") as file:
            tasks = file.readlines()

        for line in tasks:
            if "|" not in line:
                logging.warning(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ tasks.txt: {line.strip()}")
                continue
            try:
                chat_id, message_text, scheduled_time, task_type, status = line.strip().split("|")
                if task_type == "single":
                    run_date = datetime.strptime(scheduled_time, "%Y-%m-%d %H:%M:%S")
                    if run_date > datetime.now():
                        scheduler.add_job(send_scheduled_message, 'date', run_date=run_date, args=[bot, chat_id, message_text], id=f"{chat_id}_{message_text}_{scheduled_time}_single")
                elif task_type == "recurring":
                    run_time = datetime.strptime(scheduled_time, "%H:%M:%S").time()
                    scheduler.add_job(send_scheduled_message, 'cron', hour=run_time.hour, minute=run_time.minute, args=[bot, chat_id, message_text], id=f"{chat_id}_{message_text}_{scheduled_time}_recurring")
            except ValueError as e:
                 logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –≤ tasks.txt: {line.strip()} - {e}")
            except Exception as e:
                 logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ tasks.txt: {line.strip()} - {e}")

    except FileNotFoundError:
        logging.info("–§–∞–π–ª tasks.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
        with open("tasks.txt", "w", encoding="utf-8"):
            pass
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {e}")


def save_scheduled_task(chat_id, message_text, scheduled_time_str, task_type, status="pending"):
    try:
        with open("tasks.txt", "a", encoding="utf-8") as file:
            file.write(f"{chat_id}|{message_text}|{scheduled_time_str}|{task_type}|{status}\n")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É: {e}")


def send_scheduled_message(bot, chat_id, message_text):
    try:
        bot.send_text(chat_id=chat_id, text=message_text)
        update_task_status(chat_id, message_text, "sent", task_type="single")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")


def update_task_status(chat_id, message_text, new_status, task_type="single"):
    try:
        with open("tasks.txt", "r", encoding="utf-8") as file:
            tasks = file.readlines()

        updated_tasks = []
        found = False
        for task in tasks:
            try:
                t_chat_id, t_message_text, t_scheduled_time, t_task_type, t_status = task.strip().split("|")
                if t_chat_id == chat_id and t_message_text == message_text and t_task_type == task_type:
                    updated_tasks.append(f"{t_chat_id}|{t_message_text}|{t_scheduled_time}|{t_task_type}|{new_status}\n")
                    found = True
                else:
                    updated_tasks.append(task)
            except ValueError:
                 updated_tasks.append(task)

        if found:
            with open("tasks.txt", "w", encoding="utf-8") as file:
                file.writelines(updated_tasks)
    except FileNotFoundError:
        logging.warning("–§–∞–π–ª tasks.txt –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
        pass
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {e}")


def schedule_message(bot, chat_id, scheduled_datetime, message_text):
    scheduled_time_str = scheduled_datetime.strftime("%Y-%m-%d %H:%M:%S")
    scheduler.add_job(send_scheduled_message, 'date', run_date=scheduled_datetime, args=[bot, chat_id, message_text], id=f"{chat_id}_{message_text}_{scheduled_time_str}_single")
    save_scheduled_task(chat_id, message_text, scheduled_time_str, "single")


def schedule_recurring_message(bot, chat_id, time_obj, message_text):
    scheduled_time_str = time_obj.strftime("%H:%M:%S")
    scheduler.add_job(send_scheduled_message, 'cron', hour=time_obj.hour, minute=time_obj.minute, args=[bot, chat_id, message_text], id=f"{chat_id}_{message_text}_{scheduled_time_str}_recurring")
    save_scheduled_task(chat_id, message_text, scheduled_time_str, "recurring", status="active")


def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.start_handler()
def start_command(bot, event):
    bot.send_text(chat_id=event.from_chat, text="–ô–æ—É! –ñ–º–∏ /menu, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ —è –º–æ–≥—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@bot.message_handler(filters=RegexpFilter(greet_pattern) & (lambda event: event.chat_type == "private"))
def greet_user(bot, event):
    user_first_name = event.message_author.get("firstName", "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫")
    bot.send_text(chat_id=event.from_chat, text=f"–•–∞–π, {user_first_name}! üòâ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—â–∞–Ω–∏—è
@bot.message_handler(filters=RegexpFilter(farewell_pattern) & (lambda event: event.chat_type == "private"))
def farewell_user(bot, event):
    user_first_name = event.message_author.get("firstName", "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫")
    bot.send_text(chat_id=event.from_chat, text=f"–î–æ —Å–≤—è–∑–∏, {user_first_name}! üòé")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞
@bot.new_member_handler()
def greet_new_member(bot, event):
    new_members = event.data.get("newMembers", [])
    if any(member.get("userId") == bot.uin for member in new_members):
        bot.send_text(
            chat_id=event.data["chat"]["chatId"],
            text = """
            –ó–¥–∞—Ä–æ–≤–∞! üéâ –Ø –≤–∞—à –Ω–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ì–æ—Ç–æ–≤ —Å–ª—É–∂–∏—Ç—å!
            –ù–∞–ø–∏—à–∏—Ç–µ <b>/menu</b>, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!
            """,
            parse_mode = "HTML"
        )
        return
    for member in new_members:
        if member.get("userId") != bot.uin:
            user_first_name = member.get("firstName")
            greeting = f"<b>–ü—Ä–∏–≤–µ—Ç–∏–∫, {user_first_name}!</b> ‚ú® –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ —á–∞—Ç–µ!"
            bot.send_text(
                chat_id=event.data["chat"]["chatId"],
                text=greeting,
                parse_mode="HTML"
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
@bot.command_handler(command="menu")
def menu_command(bot, event):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(KeyboardButton(text="üìå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callbackData="schedule_message"))
    keyboard.add(KeyboardButton(text="üîÅ –°–æ–∑–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É", callbackData="always_msg"))
    keyboard.add(KeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callbackData="view_scheduled_messages"))
    keyboard.add(KeyboardButton(text="üîÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callbackData="view_recurring_messages"))
    keyboard.add(KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callbackData="info_msg"))
    bot.send_text(chat_id=event.from_chat, text="–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:", inline_keyboard_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ø—Ä–∞–≤–∫–∞"
@bot.button_handler(filters=lambda event: event.data.get('callbackData') == "info_msg")
def info_message(bot, event):
    user_data = event.data.get('from')
    user_firstname = "–î—Ä—É–≥"
    if user_data:
        user_firstname = user_data.get("firstName", user_firstname)
    info = f"""
–•—ç–π, {user_firstname}!
–≠—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏.
1. –ö–Ω–æ–ø–∫–∞ "üìå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ": –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ <b>–æ–¥–∏–Ω —Ä–∞–∑</b> –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
   –í–≤–æ–¥ –≤ <b>3 —à–∞–≥–∞</b>: —Å–Ω–∞—á–∞–ª–∞ –¥–∞—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>), –ø–æ—Ç–æ–º –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç <b>–ß–ß:–ú–ú</b>), –∏ –∑–∞—Ç–µ–º —Å–∞–º <b>—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</b>.
2. –ö–Ω–æ–ø–∫–∞ "üîÅ –°–æ–∑–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É": –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è <b>–∫–∞–∂–¥—ã–π –¥–µ–Ω—å</b> –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è.
   –í–≤–æ–¥ –≤ <b>2 —à–∞–≥–∞</b>: –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç <b>–ß–ß:–ú–ú</b>) –∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.
3. –ö–Ω–æ–ø–∫–∞ "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è": –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ –æ–∂–∏–¥–∞—é—â–∏–µ).
4. –ö–Ω–æ–ø–∫–∞ "üîÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏": –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Ö —É–¥–∞–ª–∏—Ç—å.
"""
    bot.send_text(chat_id=event.from_chat, text = info, parse_mode = "HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
@bot.button_handler(filters=lambda event: event.data.get('callbackData') == "schedule_message")
def initiate_schedule_message(bot, event):
    bot.send_text(chat_id=event.from_chat, text="–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì)")
    user_states[event.from_chat] = {"state": "waiting_for_date", "type": "single"}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"
@bot.button_handler(filters=lambda event: event.data.get('callbackData') == "always_msg")
def initiate_recurring(bot, event):
    bot.send_text(chat_id=event.from_chat, text="–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú)")
    user_states[event.from_chat] = {"state": "waiting_for_time", "type": "recurring"}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
@bot.button_handler(filters=lambda event: event.data.get('callbackData') == "view_scheduled_messages")
def view_scheduled_messages(bot, event):
    try:
        with open("tasks.txt", "r", encoding="utf-8") as file:
            tasks = file.readlines()

        user_tasks = []
        for task in tasks:
             try:
                 task_chat_id, message_text, scheduled_time, task_type, status = task.strip().split("|")
                 if task_chat_id == event.from_chat and task_type == "single":
                     user_tasks.append((message_text, scheduled_time, status))
             except ValueError:
                 logging.warning(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ tasks.txt –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {task.strip()}")
                 continue

        if user_tasks:
            response = "–í–∞—à–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
            for i, (message_text, scheduled_time, status) in enumerate(user_tasks, 1):
                try:
                    dt_obj = datetime.strptime(scheduled_time, "%Y-%m-%d %H:%M:%S")
                    display_time = dt_obj.strftime('%d.%m.%Y %H:%M')
                except ValueError:
                    display_time = scheduled_time
                status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if status == "sent" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
                response += f"{i}. –¢–µ–∫—Å—Ç: {message_text}\n   –í—Ä–µ–º—è: {display_time}\n   –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        else:
            response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."

        bot.send_text(chat_id=event.from_chat, text=response)
    except FileNotFoundError:
        bot.send_text(chat_id=event.from_chat, text="–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {event.from_chat}: {e}")
        bot.send_text(chat_id=event.from_chat, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–æ–∫"
@bot.button_handler(filters=lambda event: event.data.get('callbackData') == "view_recurring_messages")
def view_recurring_messages(bot, event):
    try:
        with open("tasks.txt", "r", encoding="utf-8") as file:
            tasks = file.readlines()

        user_tasks = []
        task_details = []
        for i, task in enumerate(tasks):
             try:
                 task_chat_id, message_text, scheduled_time, task_type, status = task.strip().split("|")
                 if task_chat_id == event.from_chat and task_type == "recurring" and status == "active":
                     try:
                         time_obj = datetime.strptime(scheduled_time, "%H:%M:%S").time()
                         display_time = time_obj.strftime('%H:%M')
                     except ValueError:
                         display_time = scheduled_time
                     user_tasks.append((i, message_text, display_time))
                     task_details.append({"index": i, "chat_id": task_chat_id, "text": message_text, "time": scheduled_time})
             except ValueError:
                 logging.warning(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ tasks.txt –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–∞—Å—Å—ã–ª–æ–∫: {task.strip()}")
                 continue

        if user_tasks:
            response = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
            keyboard = InlineKeyboardMarkup()
            for idx, message_text, display_time in user_tasks:
                response += f"{idx + 1}. –¢–µ–∫—Å—Ç: {message_text}\n   –í—Ä–µ–º—è: {display_time}\n\n"
                keyboard.add(KeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ‚Ññ{idx + 1}", callbackData=f"delete_recurring_{idx}"))

            bot.send_text(chat_id=event.from_chat, text=response, inline_keyboard_markup=keyboard)
        else:
            bot.send_text(chat_id=event.from_chat, text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.")
    except FileNotFoundError:
        bot.send_text(chat_id=event.from_chat, text="–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è {event.from_chat}: {e}")
        bot.send_text(chat_id=event.from_chat, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
@bot.button_handler(filters=lambda event: event.data.get('callbackData', "").startswith("delete_recurring_"))
def delete_recurring_message(bot, event):
    try:
        task_line_index = int(event.data.get('callbackData').split("_")[2])

        with open("tasks.txt", "r", encoding="utf-8") as file:
            tasks = file.readlines()

        if 0 <= task_line_index < len(tasks):
            deleted_task_line = tasks[task_line_index].strip()
            try:
                chat_id, message_text, scheduled_time, task_type, status = deleted_task_line.split("|")

                if task_type == "recurring":
                    del tasks[task_line_index]
                    with open("tasks.txt", "w", encoding="utf-8") as file:
                        file.writelines(tasks)

                    job_id = f"{chat_id}_{message_text}_{scheduled_time}_recurring"
                    try:
                        scheduler.remove_job(job_id)
                        bot.send_text(chat_id=event.from_chat, text="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É {job_id} –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω–∞?): {e}")
                        bot.send_text(chat_id=event.from_chat, text="–†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–µ).")

                else:
                     bot.send_text(chat_id=event.from_chat, text="–°–±–æ–π: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É.")

            except ValueError:
                bot.send_text(chat_id=event.from_chat, text="–°–±–æ–π: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            except Exception as e:
                 logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ –∑–∞–¥–∞—á–∏ {task_line_index}: {e}")
                 bot.send_text(chat_id=event.from_chat, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        else:
            bot.send_text(chat_id=event.from_chat, text="–°–±–æ–π: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏.")
    except FileNotFoundError:
        bot.send_text(chat_id=event.from_chat, text="–°–±–æ–π: –§–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        bot.send_text(chat_id=event.from_chat, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
def handle_message(bot, event):
    chat_id = event.from_chat
    text = event.text

    if chat_id in user_states:
        state = user_states[chat_id]

        if state["state"] == "waiting_for_date":
            try:
                date = datetime.strptime(text, "%d.%m.%Y")
                if date < datetime.now().replace(hour=0, minute=0, second=0, microsecond=0):
                     bot.send_text(chat_id=chat_id, text="–≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
                     return
                user_states[chat_id].update({"state": "waiting_for_time", "date": date})
                bot.send_text(chat_id=chat_id, text="–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú)")
            except ValueError:
                bot.send_text(chat_id=chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ù—É–∂–µ–Ω –î–î.–ú–ú.–ì–ì–ì–ì. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        elif state["state"] == "waiting_for_time":
            try:
                time_input = datetime.strptime(text, "%H:%M").time()
                if state["type"] == "single":
                    scheduled_datetime_naive = datetime.combine(state["date"], time_input)
                    scheduled_datetime = moscow_tz.localize(scheduled_datetime_naive)

                    if scheduled_datetime < datetime.now(moscow_tz):
                         bot.send_text(chat_id=chat_id, text="–£–≤—ã, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.")
                         user_states[chat_id] = {"state": "waiting_for_date", "type": "single"}
                         bot.send_text(chat_id=chat_id, text="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì)")
                         return

                user_states[chat_id].update({"state": "waiting_for_text", "time": time_input})
                bot.send_text(chat_id=chat_id, text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
            except ValueError:
                bot.send_text(chat_id=chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ù—É–∂–µ–Ω –ß–ß:–ú–ú. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        elif state["state"] == "waiting_for_text":
            message_text = text
            if not message_text:
                bot.send_text(chat_id=chat_id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
                return

            if state["type"] == "single":
                scheduled_datetime = datetime.combine(state["date"], state["time"])
                if scheduled_datetime < datetime.now():
                     bot.send_text(chat_id=chat_id, text="–£–≤—ã, –ø–æ–∫–∞ –≤—ã –≤–≤–æ–¥–∏–ª–∏ —Ç–µ–∫—Å—Ç, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                else:
                    schedule_message(bot, chat_id, scheduled_datetime, message_text)
                    bot.send_text(chat_id=chat_id, text=f"–ü—Ä–∏–Ω—è—Ç–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {scheduled_datetime.strftime('%d.%m.%Y –≤ %H:%M')}")

            elif state["type"] == "recurring":
                schedule_recurring_message(bot, chat_id, state["time"], message_text)
                bot.send_text(chat_id=chat_id, text=f"–ì–æ—Ç–æ–≤–æ! –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {state['time'].strftime('%H:%M')}")

            del user_states[chat_id]
        else:
            if chat_id in user_states:
                del user_states[chat_id]


# --- –ó–∞–ø—É—Å–∫ ---

scheduler_thread = Thread(target=run_scheduler)
scheduler_thread.daemon = True
scheduler_thread.start()

bot.dispatcher.add_handler(MessageHandler(callback=handle_message))

load_scheduled_tasks(bot)

logging.basicConfig(level=logging.INFO)
logging.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
bot.start_polling()
logging.info("–ë–æ—Ç –Ω–∞—á–∞–ª –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
bot.idle()
logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.") 